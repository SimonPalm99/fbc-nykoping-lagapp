import React, { useState } from "react";
import { useUser } from "../context/UserContext";
import { useAuth } from "../context/AuthContext";
import css from "./Gamification.module.css";

// Po√§ngsystem: lista p√• alla s√§tt att f√• po√§ng
const pointsList = [
  { label: "Deltagit i tr√§ning", points: 5, auto: true },
  { label: "Deltagit i match", points: 10, auto: true },
  { label: "Gjort m√•l i match", points: 3, auto: true },
  { label: "Gjort assist i match", points: 2, auto: true },
  { label: "Registrerat tr√§ning i tr√§ningslogg", points: 5, auto: true },
  { label: "Tr√§nat flera g√•nger i rad (streak)", points: 10, auto: true },
  { label: "Vunnit veckans utmaning", points: 15, auto: false },
  { label: "F√•tt specialbadge", points: 20, auto: false },
  { label: "R√∂stad till MVP", points: 25, auto: false },
];

const allChallenges = [
  { id: "challenge1", name: "Flest tr√§ningspass denna vecka", period: "vecka", type: "training" },
  { id: "challenge2", name: "Hattrick i match", period: "m√•nad", type: "match" },
  { id: "challenge3", name: "Tr√§nat extra utanf√∂r ordinarie tr√§ning", period: "vecka", type: "extra" },
  { id: "challenge4", name: "Veckans lagspelare (r√∂stad av laget)", period: "vecka", type: "social" }
];

const seasonAwards = [
  { id: "award1", name: "√Örets lagspelare", description: "Flest MVP-r√∂ster under s√§songen" },
  { id: "award2", name: "√Örets tr√§ningsmaskin", description: "Flest tr√§ningspass under s√§songen" },
  { id: "award3", name: "√Örets m√•lskytt", description: "Flest gjorda m√•l under s√§songen" },
  { id: "award4", name: "√Örets assistkung", description: "Flest assist under s√§songen" }
];

function getAwardWinner(users: any[]): string {
  return users[0]?.name ?? "Ingen";
}

const getRandomChallenge = () => {
  if (allChallenges.length === 0) return undefined;
  const idx = Math.floor(Math.random() * allChallenges.length);
  return allChallenges[idx];
};

// Demo: Alla po√§ng och statistik √§r noll, badges tomma, men namn och tr√∂jnummer √§r riktiga
// Demo: Alla po√§ng √§r noll
const getTotalPoints = (_player: any) => 0;

const Gamification: React.FC = () => {
  const { user } = useAuth();
  const { users } = useUser();
  const [search, setSearch] = useState("");
  const [weeklyVote, setWeeklyVote] = useState<string>("");
  const handleWeeklyVote = (id: string) => setWeeklyVote(id);

  // Filtrera och visa endast godk√§nda anv√§ndare
  const approvedUsers = users.filter(u => u.isApproved);
  const leaderboard = approvedUsers
    .map(p => ({ ...p, points: getTotalPoints(p) }))
    .sort((a, b) => b.points - a.points);
  const currentUser = leaderboard.find(p => p.id === user?.id);
  const todaysChallenge = getRandomChallenge();

  return (
    <div className={css.root}>
      <div className={css.backBtnWrap}>
        <button
          className={css.backBtn}
          onClick={() => window.location.href = '/'}
        >
          Tillbaka
        </button>
      </div>
      {/* Rubrik och f√∂rklaring */}
      <div className={css.center}>
        <h1 className={css.heading}>FBC Gamification</h1>
        <div className={css.subheading}>
          Samla po√§ng, utmana dig sj√§lv och laget, r√∂sta p√• veckans spelare och f√∂lj din utveckling. Allt sker automatiskt ‚Äì du fokuserar p√• att ha kul och bli b√§ttre!
        </div>
      </div>
      {/* Personlig √∂versikt */}
      {currentUser && (
        <div className={css.card}>
          <h2 className={css.sectionTitle}>Din profil</h2>
          <div className={css.profileRow}>
            <div className={css.profileName}>{currentUser.name} <span className={css.profileId}>#{currentUser.id}</span></div>
            <div className={css.profilePoints}>{currentUser.points} po√§ng</div>
          </div>
        </div>
      )}
      {/* S√∂k/filter */}
      <div className={css.inputRow}>
        <input className={css.inputField} type="text" value={search} onChange={e => setSearch(e.target.value)} placeholder="S√∂k spelare eller utm√§rkelse..." />
      </div>
      {/* Topplista: Endast de 5 b√§sta */}
      <div className={css.card}>
        <h2 className={css.sectionTitle}>Topplista</h2>
        <ol className={css.leaderboardList}>
          {leaderboard.slice(0, 5).map((player, i) => (
            <li key={player.id} className={i === 0 ? `${css.leaderboardItem} ${css.first}` : css.leaderboardItem}>
              <span className={i === 0 ? css.leaderboardRank : `${css.leaderboardRank} ${css.other}`}>{i + 1}</span>
              <span className={css.leaderboardName}>{player.name} <span className={css.leaderboardId}>#{player.id}</span></span>
              <span className={css.leaderboardPoints}>{player.points} po√§ng</span>
            </li>
          ))}
        </ol>
      </div>
      {/* Po√§ngsystem: lista p√• alla s√§tt att f√• po√§ng */}
      <div className={css.cardDark}>
        <h2 className={css.sectionTitle}>S√• h√§r f√•r du po√§ng</h2>
        <ul className={css.pointsList}>
          {pointsList.map((item, idx) => (
            <li key={idx} className={css.pointsItem}>
              <span className={item.auto ? css.pointsLabel : `${css.pointsLabel} ${css.manual}`}>{item.label}</span>
              <span className={css.pointsValue}>+{item.points} po√§ng</span>
              {item.auto && <span className={css.pointsAuto}>(automatiskt)</span>}
            </li>
          ))}
        </ul>
      </div>
      {/* Veckans spelare-r√∂stning */}
      <div className={css.card}>
        <h2 className={css.sectionTitle}>R√∂sta p√• Veckans spelare</h2>
        <div className={css.voteRow}>
          {leaderboard.map((player) => (
            <button
              key={player.id}
              onClick={() => handleWeeklyVote(player.id)}
              className={weeklyVote === player.id ? `${css.voteBtn} ${css.selected}` : css.voteBtn}
            >
              {player.name} <span className={css.leaderboardId}>#{player.jerseyNumber || player.id}</span>
            </button>
          ))}
        </div>
        {weeklyVote && (
          <div className={css.voteResult}>
            Du har r√∂stat p√• <span className={css.voteName}>{leaderboard.find((p) => p.id === weeklyVote)?.name}</span> som Veckans spelare!
          </div>
        )}
      </div>
      {/* Dagens utmaning */}
      <div className={css.cardDark}>
        <h2 className={css.sectionTitle}>Dagens utmaning</h2>
        <div className={css.challengeCard}>
          <span className={css.challengeIcon}>üî•</span>
          {todaysChallenge ? (
            <>
              {todaysChallenge.name} <span className={css.challengePeriod}>({todaysChallenge.period})</span>
            </>
          ) : (
            <span>Ingen utmaning idag</span>
          )}
        </div>
      </div>
      {/* S√§songspriser */}
      <div className={css.card}>
        <h2 className={css.sectionTitle}>S√§songspriser</h2>
        <ul className={css.seasonAwards}>
          <li>üèÜ {seasonAwards?.[0]?.name ?? ""}: <span className={css.seasonAwardName}>{getAwardWinner(leaderboard)}</span> <span className={css.seasonAwardDesc}>({seasonAwards?.[0]?.description ?? ""})</span></li>
          <li>üí™ {seasonAwards?.[1]?.name ?? ""}: <span className={css.seasonAwardName}>{getAwardWinner(leaderboard)}</span> <span className={css.seasonAwardDesc}>({seasonAwards?.[1]?.description ?? ""})</span></li>
          <li>‚öΩ {seasonAwards?.[2]?.name ?? ""}: <span className={css.seasonAwardName}>{getAwardWinner(leaderboard)}</span> <span className={css.seasonAwardDesc}>({seasonAwards?.[2]?.description ?? ""})</span></li>
          <li>üÖ∞Ô∏è {seasonAwards?.[3]?.name ?? ""}: <span className={css.seasonAwardName}>{getAwardWinner(leaderboard)}</span> <span className={css.seasonAwardDesc}>({seasonAwards?.[3]?.description ?? ""})</span></li>
        </ul>
      </div>
      {/* Automatisk po√§ngs√§ttning: demo-info */}
      <div className={css.cardDark}>
        <h2 className={css.sectionTitle}>Automatiska po√§ng</h2>
        <ul className={css.pointsList}>
          <li>Antal tr√§ningar h√§mtas automatiskt fr√•n tr√§ningslogg</li>
          <li>Po√§ng p√• matcher h√§mtas automatiskt fr√•n matchstatistik</li>
          <li>Registrerade tr√§ningar ger automatiskt po√§ng</li>
          <li>Streaks (antal tr√§ningar i rad) r√§knas automatiskt</li>
        </ul>
        <div className={css.automaticInfo}>
          (Integration med tr√§ningslogg och matchstatistik kan aktiveras n√§r data finns)
        </div>
      </div>
      {/* Po√§ngf√∂rklaring */}
      <div className={css.card}>
        <h2 className={css.sectionTitle}>Hur f√•r man po√§ng?</h2>
        <ul className={css.pointsList}>
          <li>Deltagit i tr√§ning eller match</li>
          <li>Gjort m√•l, assist, r√§ddning, block</li>
          <li>Vunnit "Veckans spelare" eller MVP</li>
          <li>Genomf√∂rt utmaningar eller milstolpar</li>
          <li>F√•tt utm√§rkelser eller badges</li>
          <li>Tr√§nat extra utanf√∂r ordinarie tr√§ning</li>
          <li>Bidragit till lagk√§nsla och "fair play"</li>
        </ul>
      </div>
    </div>
  );
};

export default Gamification;
